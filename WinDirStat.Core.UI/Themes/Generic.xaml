<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WinDirStat.Net.Wpf.Controls"
                    xmlns:conv="clr-namespace:WinDirStat.Net.Wpf.Converters"
                    xmlns:file="clr-namespace:WinDirStat.Net.Wpf.Controls.FileList"
                    xmlns:sort="clr-namespace:WinDirStat.Net.Wpf.Controls.SortList"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

  <!--<Style x:Key="SortViewColumnHeaderStyle"
           TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" Padding="4,0,4,0"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="24"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <Grid SnapsToDevicePixels="True">
            <Border x:Name="HeaderBorder" BorderBrush="#FFE5E5E5" BorderThickness="0,0,0,1" Background="White">
              <Border Padding="{TemplateBinding Padding}">
                <DockPanel Margin="5,0,4,0">
                  <Path Name="AscendingArrow" DockPanel.Dock="Left" Data="M 0 4 L 4 0 L 8 4" Fill="Black" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                  <Path Name="DescendingArrow" DockPanel.Dock="Left" Data="M 0 0 L 4 4 L 8 0" Fill="Black" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                  <ContentPresenter x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,0,0,1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </DockPanel>
              </Border>
            </Border>
            <Border x:Name="HeaderHoverBorder" BorderThickness="1,0,1,1" Margin="1,1,0,0"/>
            <Border x:Name="HeaderPressBorder" BorderThickness="1,1,1,0" Margin="1,0,0,1"/>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper">
                <Thumb.Style>
                  <Style TargetType="{x:Type Thumb}">
                    <Setter Property="Canvas.Right" Value="-9"/>
                    <Setter Property="Width" Value="18"/>
                    <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Background" Value="#FFE5E5E5"/>
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                          <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                            <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1"/>
                          </Border>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Thumb.Style>
              </Thumb>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="sort:SortListView.ColumnSortDirection" Value="Ascending">
              <Setter TargetName="AscendingArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="sort:SortListView.ColumnSortDirection" Value="Descending">
              <Setter TargetName="DescendingArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="HeaderBorder" Value="#D9EBF9"/>
              <Setter Property="Background" TargetName="PART_HeaderGripper" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" TargetName="HeaderBorder" Value="#BCDCF4"/>
              <Setter Property="Visibility" TargetName="PART_HeaderGripper" Value="Hidden"/>
              <Setter Property="Margin" TargetName="HeaderContent" Value="1,1,0,0"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
              <Setter Property="MinHeight" Value="20"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static sort:SortViewKeys.HeaderContainerLeftAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
  </Style>
  <Style x:Key="{x:Static sort:SortViewKeys.HeaderContainerCenterAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
  </Style>
  <Style x:Key="{x:Static sort:SortViewKeys.HeaderContainerRightAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
    <Setter Property="HorizontalContentAlignment" Value="Right"/>
  </Style>-->


    <Style TargetType="{x:Type local:SubtreePercentage}">
    <Setter Property="Focusable"
                Value="False" />
    <Setter Property="Margin" Value="0,2"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Background" Value="#FFE1E1E1"/>
    <Setter Property="BorderBrush" Value="#FFC6C6C6"/>
    <Setter Property="Fill" Value="#FF408C40"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SubtreePercentage}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PART_SpacerColumn" Width="0*"/>
              <ColumnDefinition x:Name="PART_BarColumn" Width="1*"/>
            </Grid.ColumnDefinitions>
            <!--<FrameworkElement Name="spacer" Grid.Column="0" />-->
            <Border Name="border" Grid.Column="1" BorderThickness="1" Height="10"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="0*" Name="PART_FillColoumn"/>
                  <ColumnDefinition Width="1*" Name="PART_EmptyColoumn"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="{TemplateBinding Fill}" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:PercentageBar}">
    <Setter Property="Focusable"
                Value="False" />
    <Setter Property="Margin" Value="0,2"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Background" Value="#FFE1E1E1"/>
    <Setter Property="BorderBrush" Value="#FFC6C6C6"/>
    <Setter Property="Fill" Value="#FF408C40"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:PercentageBar}">
          <!--<FrameworkElement Name="spacer" Grid.Column="0" />-->
          <Border Name="border" BorderThickness="1" Height="10"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0*" Name="PART_FillColoumn"/>
                <ColumnDefinition Width="1*" Name="PART_EmptyColoumn"/>
              </Grid.ColumnDefinitions>
              <Rectangle Fill="{TemplateBinding Fill}" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollViewerStyle1" TargetType="{x:Type ScrollViewer}">
    <!--<Style.Resources>
            <System:Double x:Key="{x:Static SystemParameters.VerticalScrollBarThumbHeightKey}">48</System:Double>
            <System:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarThumbWidthKey}">48</System:Double>
        </Style.Resources>-->
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Padding}">
              <ScrollViewer DockPanel.Dock="Top" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </ScrollViewer>
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" KeyboardNavigation.DirectionalNavigation="Local" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
            <ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Orientation="Vertical" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
            <DockPanel Background="{Binding Background, ElementName=PART_VerticalScrollBar}" Grid.Column="1" LastChildFill="False" Grid.Row="1">
              <Rectangle DockPanel.Dock="Left" Fill="White" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Width="1"/>
              <Rectangle DockPanel.Dock="Top" Fill="White" Height="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
            </DockPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ListBorder" Color="#828790"/>

  <Style x:Key="{x:Type sort:SortListView}"
           TargetType="{x:Type sort:SortListView}">
    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sort:SortListView}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
            <Themes:ListBoxChrome x:Name="Bd" BorderBrush="{x:Null}" BorderThickness="0" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
              <ScrollViewer Padding="{TemplateBinding Padding}" Style="{StaticResource ScrollViewerStyle1}">
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </ScrollViewer>
            </Themes:ListBoxChrome>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
              
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SolidColorBrush x:Key="EditBorder"
                     Color="#FF7F9DB9" />

  <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable"
                Value="False" />
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Background" Value="White"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Border"
                            Width="9"
                            Height="9"
                            BorderThickness="1"
                            BorderBrush="#808080"
                            CornerRadius="1"
                            SnapsToDevicePixels="True"
                            Background="{TemplateBinding Background}">
            <!--<Border.Background>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="1,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="White"
                                                  Offset=".2" />
                                    <GradientStop Color="#FFC0B7A6"
                                                  Offset="1" />
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>-->
            <Path Name="ExpandPath"
                              Margin="1,1,1,1"
                              Fill="Black"
                              Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked"
                                 Value="True">
              <Setter Property="Data"
                                    TargetName="ExpandPath"
                                    Value="M 0 2 L 0 3 L 5 3 L 5 2 Z" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="#D9EBF9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="#BCDCF4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type file:InsertMarker}">
    <Setter Property="IsHitTestVisible"
                Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type file:InsertMarker}">
          <Grid>
            <Border VerticalAlignment="Center"
                                Height="2"
                                Background="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Path Data="m 0 0 l 3 3 l -3 3"
                              Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              HorizontalAlignment="Left" />
            <Path Data="m 0 0 l -3 3 l 3 3"
                              Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              HorizontalAlignment="Right" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type file:EditTextBox}">
    <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
    <Setter Property="HorizontalContentAlignment"
                Value="Left" />
    <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
    <Setter Property="AllowDrop"
                Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type file:EditTextBox}">
          <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                            BorderThickness="1"
                            BorderBrush="{StaticResource EditBorder}"
                            Padding="0 1 2 0">
            <ScrollViewer Name="PART_ContentHost" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type file:FileTreeView}"
           BasedOn="{StaticResource {x:Type sort:SortListView}}">
    <Style.Triggers>
      <Trigger Property="ShowRoot"
                     Value="False">
        <Setter Property="Padding"
                        Value="5 0 0 0" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static file:FileTreeView.DefaultItemContainerStyleKey}"
           TargetType="{x:Type file:FileTreeViewItem}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.AlternationIndex"
                               Value="1" />
          <Condition Property="file:FileTreeView.ShowAlternation"
                               Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background"
                        Value="WhiteSmoke" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static file:FileGridView.ItemContainerStyleKey}"
           TargetType="{x:Type ListViewItem}">
    <Setter Property="local:ListSettings.InactiveSelection" Value="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Height" Value="20"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background"
                Value="Transparent" />
    <Setter Property="VerticalContentAlignment"
                Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Exists}" Value="False">
              <Setter Property="Foreground" Value="Firebrick"/>
            </DataTrigger>
            <!--<Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </Trigger>-->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Exists}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Exists}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="Firebrick" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Exists}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiDataTrigger>
            
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Exists}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="LightPink" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Exists}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
              <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type file:FileTreeViewItem}">
    <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type file:FileTreeViewItem}">
          <Border Background="Transparent">
            <Border Background="{TemplateBinding Background}">
              <file:FileTreeNodeView x:Name="nodeView"
                                                       Foreground="{Binding Foreground}"
                                                       HorizontalAlignment="Left" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected"
                                 Value="True">
              <Setter TargetName="nodeView"
                                    Property="TextBackground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </Trigger>
            <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="nodeView"
                                    Property="TextBackground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>-->
            <Trigger Property="IsEnabled"
                                 Value="False">
              <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type file:FileTreeNodeView}">
    <Setter Property="Focusable"
                Value="False" />
    <Setter Property="Height" Value="20"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type file:FileTreeNodeView}">
          <Grid>
            <file:LinesRenderer x:Name="linesRenderer"
                                               ClipToBounds="True"
                                               Visibility="{Binding ShowLines, RelativeSource={RelativeSource AncestorType={x:Type file:FileTreeView}}, Converter={conv:CollapsedWhenFalse}}" />
            <DockPanel>
              <FrameworkElement Name="spacer" />
              <ToggleButton Name="expander"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"
                                          IsChecked="{Binding IsExpanded}"
                                          Visibility="Hidden"
                                          Margin="0 0 6 0"
                                          VerticalAlignment="Center" />
              <DockPanel Background="Transparent"
                                       ToolTip="{Binding ToolTip}">
                <Grid>
                  <Image Name="icon"
                                           Source="{Binding Icon}"
                                           Width="16"
                                           Height="16"
                                           Margin="0 0 5 1"
                                           VerticalAlignment="Center"
                                           Focusable="False"/>
                  <Image Name="overlay"
                                           Source="{Binding OverlayIcon}"
                                           Width="16"
                                           Height="16"
                                           Margin="0 0 5 1"
                                           VerticalAlignment="Center"
                                           Focusable="False"/>
                </Grid>
                <Border Name="textContainer"
                                    Background="{TemplateBinding TextBackground}">
                  <TextBlock Text="{Binding Header}"
                                               Margin="2 0 0 0"
                                               VerticalAlignment="Center"
                                               Focusable="False" 
                                               TextTrimming="CharacterEllipsis"/>
                </Border>
                <Border Name="textEditorContainer" />
              </DockPanel>
            </DockPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsEditing}"
                                     Value="True">
              <Setter TargetName="textContainer"
                                    Property="Visibility"
                                    Value="Collapsed" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding ShowIcon}"
                                     Value="False">
                            <Setter TargetName="icon"
                                    Property="Visibility"
                                   Value="Collapsed" />
                        </DataTrigger>-->
            <!--<DataTrigger Binding="{Binding IsExpanded}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Content"
                                    Value="{Binding ExpandedIcon}" />
                        </DataTrigger>-->
            <DataTrigger Binding="{Binding ShowExpander}"
                                     Value="True">
              <Setter TargetName="expander"
                                    Property="Visibility"
                                    Value="Visible" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding IsCheckable}"
                                     Value="True">
                            <Setter TargetName="checkBoxContainer"
                                    Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCut}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Opacity"
                                    Value="0.5" />
                        </DataTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="CleanListView" TargetType="{x:Type ListView}">
    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="#FF042271"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
            <Themes:ListBoxChrome x:Name="Bd" BorderBrush="{x:Null}" BorderThickness="0" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
              <ScrollViewer Padding="{TemplateBinding Padding}" Style="{StaticResource ScrollViewerStyle1}">
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </ScrollViewer>
            </Themes:ListBoxChrome>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListViewItem}">
          <Setter Property="local:ListSettings.InactiveSelection" Value="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
          <Setter Property="Foreground" Value="Black"/>
          <Setter Property="Height" Value="20"/>
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="VerticalContentAlignment" Value="Center" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Border Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="true">
                  <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsSelected" Value="true">
                    <Setter TargetName="Bd" Property="Background"
                                                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="True"/>
                      <Condition Property="Selector.IsSelectionActive" Value="False"/>
                      <Condition Property="local:ListSettings.InactiveSelection" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background"
                                                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>

  <!--<DataTemplate x:Key="{x:Static local:SortViewColumn.CellTemplate}">
        <TextBlock Text="{Binding}" TextAlignment="{Binding Colu}"/>
    </DataTemplate>-->

  <!--<Style x:Key="SortViewColumnHeaderStyle"
           TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" Margin="5,0,4,0">
                        <Path Name="AscendingArrow"/>
                        <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" Padding="4,0,4,0"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="HeaderBorder" BorderBrush="#FFE5E5E5" BorderThickness="0,0,0,1" Background="White">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="7"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Padding="{TemplateBinding Padding}" Grid.RowSpan="2">
                                    <ContentPresenter x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,0,0,1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HeaderHoverBorder" BorderThickness="1,0,1,1" Margin="1,1,0,0"/>
                        <Border x:Name="HeaderPressBorder" BorderThickness="1,1,1,0" Margin="1,0,0,1"/>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper">
                                <Thumb.Style>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="Canvas.Right" Value="-9"/>
                                        <Setter Property="Width" Value="18"/>
                                        <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        <Setter Property="Padding" Value="0"/>
                                        <Setter Property="Background" Value="#FFE5E5E5"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                        <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="#D9EBF9"/>
                            <Setter Property="Background" TargetName="PART_HeaderGripper" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="#BCDCF4"/>
                            <Setter Property="Visibility" TargetName="PART_HeaderGripper" Value="Hidden"/>
                            <Setter Property="Margin" TargetName="HeaderContent" Value="1,1,0,0"/>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static local:SortViewKeys.HeaderContainerLeftAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <Style x:Key="{x:Static local:SortViewKeys.HeaderContainerCenterAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="{x:Static local:SortViewKeys.HeaderContainerRightAlignStyleKey}"
           TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource SortViewColumnHeaderStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>-->
  <!--<Style TargetType="{x:Type local:SortListView}" BasedOn="{StaticResource CleanListView}">
        
    </Style>-->

  <Style x:Key="{x:Static sort:SortView.SortViewItemContainerStyleKey}"
           TargetType="{x:Type ListViewItem}">
    <Setter Property="local:ListSettings.InactiveSelection" Value="{Binding Path=(local:ListSettings.InactiveSelection), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Height" Value="20"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background"
                Value="Transparent" />
    <Setter Property="VerticalContentAlignment"
                Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True"/>
                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                <Condition Property="local:ListSettings.InactiveSelection" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
              <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static sort:SortView.SortViewStyleKey}" TargetType="{x:Type sort:SortListView}" BasedOn="{StaticResource {x:Type sort:SortListView}}">
    <Style.Resources>
      <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{x:Static sort:SortViewKeys.HeaderContainerLeftAlignStyle}"/>
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
  </Style>
</ResourceDictionary>